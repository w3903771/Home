# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'doorWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys
import time

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QDialog, QMainWindow, QMessageBox

from Detection.Face_Detection import Face_Rec

sys.path.append("..")


class Ui_doorWindow(object):
    def __init__(self):
        self.code_path = os.path.dirname(os.path.abspath(__file__))  # 获取代码路径
        self.project_path = os.path.dirname(self.code_path)  # 获取识别项目路径
        self.source_path = os.path.join(
            self.project_path, "resources")  # 获取依赖数据路径
        self.photo_path = os.path.join(
            self.source_path, "FaceImage")  # 获取人脸文件夹路径
        self.facerec = Face_Rec()

        self.runflag = False  # 循环起始控制变量

    def setupUi(self, doorWindow):
        doorWindow.setObjectName("doorWindow")
        doorWindow.resize(1081, 812)
        self.centralwidget = QtWidgets.QWidget(doorWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame1 = QtWidgets.QFrame(self.centralwidget)
        self.frame1.setGeometry(QtCore.QRect(10, 20, 561, 731))
        self.frame1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame1.setObjectName("frame1")
        self.label_1 = QtWidgets.QLabel(self.frame1)
        self.label_1.setGeometry(QtCore.QRect(30, 20, 121, 31))
        self.label_1.setObjectName("label_1")
        self.NormalFace = QtWidgets.QLabel(self.frame1)
        self.NormalFace.setGeometry(QtCore.QRect(20, 60, 521, 551))
        self.NormalFace.setFrameShape(QtWidgets.QFrame.Box)
        self.NormalFace.setText("")
        self.NormalFace.setObjectName("NormalFace")
        self.stopButton = QtWidgets.QPushButton(self.frame1)
        self.stopButton.setGeometry(QtCore.QRect(200, 630, 131, 61))
        self.stopButton.setObjectName("stopButton")
        self.startButton = QtWidgets.QPushButton(self.frame1)
        self.startButton.setGeometry(QtCore.QRect(30, 630, 131, 61))
        self.startButton.setObjectName("startButton")
        self.registButton = QtWidgets.QPushButton(self.frame1)
        self.registButton.setGeometry(QtCore.QRect(380, 630, 131, 61))
        self.registButton.setObjectName("registButton")
        self.NormalFace.raise_()
        self.label_1.raise_()
        self.stopButton.raise_()
        self.startButton.raise_()
        self.registButton.raise_()
        self.frame2 = QtWidgets.QFrame(self.centralwidget)
        self.frame2.setGeometry(QtCore.QRect(580, 30, 451, 731))
        self.frame2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame2.setObjectName("frame2")
        self.label_2 = QtWidgets.QLabel(self.frame2)
        self.label_2.setGeometry(QtCore.QRect(20, 20, 131, 31))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.frame2)
        self.label_3.setGeometry(QtCore.QRect(20, 510, 131, 16))
        self.label_3.setObjectName("label_3")
        self.Button_OpenPhoto = QtWidgets.QPushButton(self.frame2)
        self.Button_OpenPhoto.setGeometry(QtCore.QRect(160, 680, 131, 41))
        self.Button_OpenPhoto.setObjectName("Button_OpenPhoto")
        self.ErrorText = QtWidgets.QPlainTextEdit(self.frame2)
        self.ErrorText.setGeometry(QtCore.QRect(10, 530, 421, 141))
        self.ErrorText.setObjectName("ErrorText")
        self.ErrorFace = QtWidgets.QLabel(self.frame2)
        self.ErrorFace.setGeometry(QtCore.QRect(10, 50, 421, 441))
        self.ErrorFace.setFrameShape(QtWidgets.QFrame.Box)
        self.ErrorFace.setText("")
        self.ErrorFace.setIndent(6)
        self.ErrorFace.setObjectName("ErrorFace")
        doorWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(doorWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1081, 26))
        self.menubar.setObjectName("menubar")
        doorWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(doorWindow)
        self.statusbar.setObjectName("statusbar")
        doorWindow.setStatusBar(self.statusbar)

        self.retranslateUi(doorWindow)
        QtCore.QMetaObject.connectSlotsByName(doorWindow)

        # 设置按钮响应
        self.startButton.clicked.connect(self.start)
        self.stopButton.clicked.connect(self.stop)

    def retranslateUi(self, doorWindow):
        _translate = QtCore.QCoreApplication.translate
        doorWindow.setWindowTitle(_translate("doorWindow", "智能门禁"))
        self.label_1.setText(_translate("doorWindow", "检测显示窗口"))
        self.stopButton.setText(_translate("doorWindow", "停止检测"))
        self.startButton.setText(_translate("doorWindow", "开始检测"))
        self.registButton.setText(_translate("doorWindow", "主人人脸记录"))
        self.label_2.setText(_translate("doorWindow", "异常人脸显示窗口"))
        self.label_3.setText(_translate("doorWindow", "异常人脸记录："))
        self.Button_OpenPhoto.setText(_translate("doorWindow", "查看异常人脸图片"))

    def start(self):
        if not self.starttime == 0 and time.time() - self.starttime > 90:  # 距离上次停止识别已经超过90秒
            self.runflag = True  # 开始循环
            self.starttime = 0  # 停止识别计时清0
            self.count = 0  # 人脸检测数清0
            self.detecttime = 0  # 人脸检测起始时间清0
        else:
            QMessageBox.warning(self, "警告", "距离上次开启还不足90秒，请耐心等待")
        # 考虑到可能多次启动 若共享文件夹为空 需要重新调用 启用树莓派程序
        # 调用文件处理函数 开始放图片到resources内

        while self.runflag:
            if not os.listdir(self.photo_path) == 0:
                imagePaths = [os.path.join(self.photo_path, f)
                              for f in os.listdir(self.photo_path)]  # 列表生成式产生图像路径列表
                for imagePath in imagePaths:
                    pic = self.QPixmap(imagePath)
                    self.NormalFace.setPixmap(pic)  # 显示该图片
                    isperson = self.facerec.isperson(imagePath)
                    if isperson:
                        flag, img = self.facerec.ishost(imagePath)  # flag为真表示不是主人 此时img返回识别的人脸图片
                        if flag:
                            if not self.detecttime == 0:  # 起始时间未记录则记录开始检测到人脸的时间
                                self.detecttime = time.time()
                            self.count += 1
                        if time.time() - self.detecttime > 120 and self.count > 20:  # 停留时间超过2分钟 识别次数超过20次 记录为异常
                            # 调用文件处理 存储异常图片 返回文件路径
                            # 调用文件处理 返回要记录的日志文本 同时在外部log文件追加内容
                            self.count = 0
                            self.detecttime = 0
                            wrongImagePath = 1  # 储存的异常图片路径 待完善
                            pic2 = self.QPixmap(wrongImagePath)
                            self.ErrorFace.setPixmap(pic)  # 显示异常人脸图片
                            logtext = 1  # 要插入的日志文本内容 待完善
                            self.ErrorText.appendPlainText(logtext)  # 插入日志
                        elif time.time() - self.detecttime > 180 and self.count < 5:  # 无人或正常人经过 记录清空
                            self.count = 0
                            self.detecttime = 0

    def stop(self):
        replay = QMessageBox.question(self, "", "确认停止嘛，下次开启需间隔90秒", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if replay == QMessageBox.Yes:
            self.runflag = False
            self.starttime = time.time()  # 记录关闭时的系统时间
            #清空共享文件夹 1分半内不允许再次开启

class doorWindow(QMainWindow):
    def __init__(self):
        QDialog.__init__(self)
        self.child = Ui_doorWindow()
        self.child.setupUi(self)
