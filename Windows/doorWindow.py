# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'doorWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

import cv2
from PyQt5.QtCore import QTimer

sys.path.append("..")
import time

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QDialog, QMainWindow, QMessageBox

from Detection.Face_Detection.Face_Rec import *
from FileAndSql.remoteSSH import SSH
from imageCollect import imageCollect


class Ui_doorWindow(object):

    def __init__(self):
        self.code_path = os.path.dirname(os.path.abspath(__file__))  # 获取代码路径
        self.project_path = os.path.dirname(self.code_path)  # 获取识别项目路径
        self.source_path = os.path.join(
            self.project_path, "resources")  # 获取依赖数据路径
        self.photo_path = r'\\192.168.137.69\pi\share\faceImage'
        self.facerec = Face_Rec()

        self.ssh = SSH()
        self.runflag = False  # 循环起始控制变量
        self.starttime = 0  # 重复启用计时清0

        timer = QTimer()

    def setupUi(self, doorWindow):
        doorWindow.setObjectName("doorWindow")
        doorWindow.resize(1081, 812)
        doorWindow.setStyleSheet(" #doorWindow{border-image: url(:/Resources/background.png);\n""}\n""")
        self.centralwidget = QtWidgets.QWidget(doorWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame1 = QtWidgets.QFrame(self.centralwidget)
        self.frame1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame1.setObjectName("frame1")
        self.label_1 = QtWidgets.QLabel(self.frame1)
        self.label_1.setGeometry(QtCore.QRect(20, 10, 121, 31))
        self.label_1.setObjectName("label_1")
        self.NormalFace = QtWidgets.QLabel(self.frame1)
        self.NormalFace.setGeometry(QtCore.QRect(20, 50, 501, 551))
        self.NormalFace.setFrameShape(QtWidgets.QFrame.Box)
        self.NormalFace.setText("")
        self.NormalFace.setObjectName("NormalFace")
        self.stopButton = QtWidgets.QPushButton(self.frame1)
        self.stopButton.setGeometry(QtCore.QRect(200, 630, 131, 61))
        self.stopButton.setObjectName("stopButton")
        self.startButton = QtWidgets.QPushButton(self.frame1)
        self.startButton.setGeometry(QtCore.QRect(30, 630, 131, 61))
        self.startButton.setObjectName("startButton")
        self.registButton = QtWidgets.QPushButton(self.frame1)
        self.registButton.setGeometry(QtCore.QRect(380, 630, 131, 61))
        self.registButton.setObjectName("registButton")
        self.NormalFace.raise_()
        self.label_1.raise_()
        self.stopButton.raise_()
        self.startButton.raise_()
        self.registButton.raise_()
        self.horizontalLayout.addWidget(self.frame1)
        self.frame2 = QtWidgets.QFrame(self.centralwidget)
        self.frame2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame2.setObjectName("frame2")
        self.label_2 = QtWidgets.QLabel(self.frame2)
        self.label_2.setGeometry(QtCore.QRect(20, 20, 131, 31))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.frame2)
        self.label_3.setGeometry(QtCore.QRect(20, 510, 131, 16))
        self.label_3.setObjectName("label_3")
        self.Button_OpenPhoto = QtWidgets.QPushButton(self.frame2)
        self.Button_OpenPhoto.setGeometry(QtCore.QRect(160, 680, 131, 41))
        self.Button_OpenPhoto.setObjectName("Button_OpenPhoto")
        self.ErrorText = QtWidgets.QPlainTextEdit(self.frame2)
        self.ErrorText.setGeometry(QtCore.QRect(10, 530, 421, 141))
        self.ErrorText.setStyleSheet("color: rgb(255, 255, 255,0);")
        self.ErrorText.setBackgroundVisible(False)
        self.ErrorText.setObjectName("ErrorText")
        self.ErrorFace = QtWidgets.QLabel(self.frame2)
        self.ErrorFace.setGeometry(QtCore.QRect(10, 50, 421, 441))
        self.ErrorFace.setFrameShape(QtWidgets.QFrame.Box)
        self.ErrorFace.setText("")
        self.ErrorFace.setIndent(6)
        self.ErrorFace.setObjectName("ErrorFace")
        self.horizontalLayout.addWidget(self.frame2)
        doorWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(doorWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1081, 26))
        self.menubar.setObjectName("menubar")
        doorWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(doorWindow)
        self.statusbar.setObjectName("statusbar")
        doorWindow.setStatusBar(self.statusbar)

        self.retranslateUi(doorWindow)
        QtCore.QMetaObject.connectSlotsByName(doorWindow)

        self.stopButton.setEnabled(False)  # 默认禁止按禁止按钮
        # 设置按钮响应
        self.startButton.clicked.connect(self.start)
        self.stopButton.clicked.connect(self.stop)
        self.registButton.clicked.connect(self.collect)

    def retranslateUi(self, doorWindow):
        _translate = QtCore.QCoreApplication.translate
        doorWindow.setWindowTitle(_translate("doorWindow", "智能门禁"))
        self.label_1.setText(_translate("doorWindow", "检测显示窗口"))
        self.stopButton.setText(_translate("doorWindow", "停止检测"))
        self.startButton.setText(_translate("doorWindow", "开始检测"))
        self.registButton.setText(_translate("doorWindow", "主人人脸记录"))
        self.label_2.setText(_translate("doorWindow", "异常人脸显示窗口"))
        self.label_3.setText(_translate("doorWindow", "异常人脸记录："))
        self.Button_OpenPhoto.setText(_translate("doorWindow", "查看异常人脸图片"))

    def start(self):
        if self.starttime == 0 or (
                not self.starttime == 0 and time.time() - self.starttime > 90):  # 首次启用 或距离上次停止识别已经超过90秒
            self.runflag = True  # 开始循环
            self.starttime = 0  # 停止识别计时清0
            self.count = 0  # 人脸检测数清0
            self.detecttime = 0  # 人脸检测起始时间清0
            self.startButton.setEnabled(False)  # 禁止重复开始
            self.stopButton.setEnabled(True)
            self.ssh.startFace()
            time.sleep(0.5)
        else:
            QMessageBox.warning(self, "警告", "距离上次开启还不足90秒，请耐心等待")

        while self.runflag:
            if os.listdir(self.photo_path):
                imagePath = os.path.join(self.photo_path, r'1.jpg')
                print(imagePath)
                img1 = cv2.imread(imagePath)
                time.sleep(1)
                self.NormalFace.setPixmap(QPixmap(imagePath).scaled(self.NormalFace.width(), self.NormalFace.height()))
                time.sleep(3)
                QtWidgets.QApplication.processEvents()
                time.sleep(3)
                isperson = self.facerec.isPerson(img1)
                print(isperson)
                if isperson:
                    flag, img2 = self.facerec.isHost(img1)  # flag为真表示是主人
                    if not flag:
                        if not self.detecttime == 0:  # 起始时间未记录则记录开始检测到人脸的时间
                            self.detecttime = time.time()
                        self.count += 1
                    if time.time() - self.detecttime > 120 and self.count > 20:  # 停留时间超过2分钟 识别次数超过20次 记录为异常
                        # 调用文件处理 存储异常图片 返回文件路径
                        # 调用文件处理 返回要记录的日志文本 同时在外部log文件追加内容
                        self.count = 0
                        self.detecttime = 0
                        wrongImagePath = 1  # 储存的异常图片路径 待完善
                        self.ErrorFace.setPixmap(QPixmap(img2).scaled(self.ErrorFace.width(),
                                                                      self.ErrorFace.height()))
                        logtext = '1'  # 要插入的日志文本内容 待完善
                        self.ErrorText.appendPlainText(logtext)  # 插入日志
                    elif time.time() - self.detecttime > 180 and self.count < 5:  # 无人或正常人经过 记录清空
                        self.count = 0
                        self.detecttime = 0
                os.remove(imagePath)
                time.sleep(2)
    def stop(self):
        replay = QMessageBox.question(self, "", "确认停止嘛，下次开启需间隔90秒", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if replay == QMessageBox.Yes:
            self.runflag = False
            self.starttime = time.time()  # 记录关闭时的系统时间
            self.ssh.stopFace()
            time.sleep(0.1)
            self.ssh.clearFace()  # 清空文件夹
            self.startButton.setEnabled(True)
            self.stopButton.setEnabled(False)

    def collect(self):
        self.imageget = imageCollect()
        self.imageget.show()

    def closeEvent(self, event):
        self.ssh.stopFace()
        event.accept()


class doorWindow(QMainWindow):
    def __init__(self):
        QDialog.__init__(self)
        self.child = Ui_doorWindow()
        self.child.setupUi(self)
