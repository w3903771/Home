# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'imageCollect.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys

import cv2
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QDialog, QMainWindow

from Detection.Face_Detection.Face_Trains import Face_Trains

sys.path.append("..")


class Ui_imageCollect(object):
    def __init__(self):

        self.windows_path = os.path.dirname(
            os.path.abspath(__file__))
        self.project_path = os.path.dirname(self.windows_path)  # 获取识别项目路径
        self.detection_path = os.path.join(
            self.project_path, "Detection")  # 获取依赖数据路径
        self.source_path = os.path.join(  # 获取资源文件夹路径
            self.detection_path, "resources")
        self.photo_path = os.path.join(
            self.source_path, "face_trainning_images")  # 获取图片保存路径
        self.cvo = cv2.CascadeClassifier('haarcascade_frontalface_alt.xml')
        self.cvo.load(
            os.path.join(self.source_path, 'haarcascade_frontalface_alt.xml'))

        self.train = Face_Trains()

    def setupUi(self, imageCollect):
        imageCollect.setObjectName("imageCollect")
        imageCollect.resize(558, 647)
        self.centralwidget = QtWidgets.QWidget(imageCollect)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 30, 451, 481))
        self.label.setFrameShape(QtWidgets.QFrame.Box)
        self.label.setText("")
        self.label.setObjectName("label")
        self.startButton = QtWidgets.QPushButton(self.centralwidget)
        self.startButton.setGeometry(QtCore.QRect(200, 530, 161, 51))
        self.startButton.setObjectName("startButton")
        imageCollect.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(imageCollect)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 558, 26))
        self.menubar.setObjectName("menubar")
        imageCollect.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(imageCollect)
        self.statusbar.setObjectName("statusbar")
        imageCollect.setStatusBar(self.statusbar)

        self.retranslateUi(imageCollect)
        QtCore.QMetaObject.connectSlotsByName(imageCollect)

        # 设置按钮响应
        self.startButton.clicked.connect(self.start)

    def retranslateUi(self, imageCollect):
        _translate = QtCore.QCoreApplication.translate
        imageCollect.setWindowTitle(_translate("imageCollect", "智能门禁"))
        self.startButton.setText(_translate("imageCollect", "开始检测"))

    def start(self):
        self.startButton.setEnabled(False)
        self.startButton.setText("采集中...请耐心等待")
        self.cam = cv2.VideoCapture(0)
        self.count = 0
        self.fpsc = 0
        while self.cam.isOpened():
            # 从摄像头读取图片
            sucess, img = self.cam.read()
            self.fpsc += 1
            height, width, bytesPerComponent = img.shape
            bytesPerLine = bytesPerComponent * width
            # 转为灰度图片
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            # 检测人脸
            faces = self.cvo.detectMultiScale(
                gray,  # 灰度图片
                scaleFactor=1.1,  # 补偿参数
                minNeighbors=4,  # 物体数
            )
            for (x, y, w, h) in faces:
                # cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255,), 2)
                show = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # 视频色彩转换回RGB，这样才是现实的颜色
                showImage = QImage(show.data, width, height, bytesPerLine, QImage.Format_RGB888)  # 把读取到的视频数据变成QImage形式
                self.label.setPixmap(QPixmap.fromImage(showImage).scaled(self.label.width(),
                                                                         self.label.height()))  # 往显示视频的Label里 显示QImage
                # 调整图像大小
                new_frame = cv2.resize(img[y - 3:y + h + 3, x - 3:x + w + 3], (200, 200))
                if self.fpsc % 3 == 0:
                    self.count += 1
                    path = os.path.join(
                        self.photo_path, '%s.jpg' %
                                         self.count)
                    # 保存图像
                    cv2.imwrite(path, new_frame)
            if (cv2.waitKey(1) & 0xFF) == ord('q'):
                break
            if self.count >= 100:  # 得到30个样本后退出摄像
                self.label.clear()
                self.startButton.setEnabled(False)
                self.startButton.setText("采集完毕...训练中")
                break
        self.cam.release()
        cv2.destroyAllWindows()
        flag = self.train.train()
        if flag == 1:  # 图片训练异常 弹出异常提示
            self.startButton.setText("训练失败，请重新采集训练")
        elif flag == 0:  # 图片训练完成 退出
            self.startButton.setText("训练完成，请关闭窗口")


class imageCollect(QMainWindow):
    def __init__(self):
        QDialog.__init__(self)
        self.child = Ui_imageCollect()
        self.child.setupUi(self)


if __name__ == "__main__":
    win = imageCollect()
    win.show()
